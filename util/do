#!/usr/bin/perl
use FindBin;
use feature qw(say);

while () {

$filename = "$FindBin::Bin/../__init__";
open(FH, '<', $filename) or die $!;

@lines = ();

while (<FH>) {
	push @lines, $_;
}

$index = rand @lines;

$line = @lines[$index];

chomp $line;

$checkSuccess = 0;

if ((rindex $line, " - ", 0) == 0) {
	say("instructions are as follows:");
	say($line);
	say("=" x 50);
	$useless = system(bash);
	say("=" x 50);
	$checkSuccess = 1;
} elsif ((rindex $line, " ! ", 0) == 0) {
	say("opening file. instructions are as follows:");
	@match1 = $line =~ /\!\s(.*)\s\"/;
	@match2 = $line =~ /\"(.*)\"$/;
	$filename = @match1[0];
	$comment = @match2[0];
	say("$filename $comment");
	$ready = <STDIN>;
	$openNano = system("nano $filename");
	$checkSuccess = 1;
} else {
	print "THIS WAS THE EXACT LINE\n";
	print $line;
	print "THIS WAS THE EXACT LINE\n";
	print "replace with > ";
	$newLine = <STDIN>;
	chomp $newLine;

	if (not $newLine eq "\%replace\%") {
		$replaceTheLine = qx("sed -i '".$index."s/.*/$newLine/' $filename");
	} else {
		$replaceTheLine = qx("sed -i '".$index."d' $filename");
	}
	next;
}

if ($checkSuccess) {
	print("success? (y/m/n) > ");
	while ($success = <STDIN>) {
		chomp $success;
		if ($success eq "y") {
			$replaceTheLine = qx("sed -i '".$index."d' $filename");
			last;
		} elsif ($success eq "m") {
			print "replace with > ";
			$newLine = <STDIN>;
			chomp $newLine;
			$replaceTheLine = qx("sed -i '".$index."s/.*/$newLine/' $filename");
			last;
		} elsif ($success eq "n") {
			last;
		}
	}

}

last;
}
